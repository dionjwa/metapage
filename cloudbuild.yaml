steps:

# Ensure that the builder image exists, if not, build it
# The builder image has all tools and dependencies required to build
# the final artifact(s)
- name: 'docker/compose:1.22.0'
  id: 'builder'
  env:
  - 'BUILDER_DOCKER_COMPOSE=docker-compose.yml'
  # "builder" is the docker image target used for all further operations
  # It is renamed to the branch name for later steps
  - 'BUILDER_DOCKERFILE_TARGET=builder builder-haxe'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      docker-compose -f $$BUILDER_DOCKER_COMPOSE pull --ignore-pull-failures $$BUILDER_DOCKERFILE_TARGET
      docker-compose -f $$BUILDER_DOCKER_COMPOSE build $$BUILDER_DOCKERFILE_TARGET
      docker-compose -f $$BUILDER_DOCKER_COMPOSE push $$BUILDER_DOCKERFILE_TARGET

- name: 'gcr.io/t9-docker-images/$REPO_NAME:builder-haxe'
  id: 'compile'
  dir: 'libs'
  env:
  - 'DOCKER_TAG=$COMMIT_SHA'
  - 'NPM_MODE=production'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      make compile

- name: 'gcr.io/t9-docker-images/$REPO_NAME:builder'
  id: 'test'
  secretEnv: ['JEKYLL_GITHUB_TOKEN']
  env:
  - 'DOCKER_REGISTRY=gcr.io/t9-docker-images'
  - 'BUILDER_DOCKER_COMPOSE=docker-compose.yml'
  - 'DOCKER_TAG=$COMMIT_SHA'
  - 'PROJECT_NAME=$REPO_NAME'
  - 'BRANCH_NAME=$BRANCH_NAME'
  - 'NPM_MODE=production'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      # Pull,build,cache the jekyll image before running tests, it's the only image (apart from builder) that needs to be cached 
      docker-compose -f $$BUILDER_DOCKER_COMPOSE pull --ignore-pull-failures jekyll
      docker-compose -f $$BUILDER_DOCKER_COMPOSE build jekyll
      docker-compose -f $$BUILDER_DOCKER_COMPOSE push jekyll
      # Now run the functional tests
      JEKYLL_GITHUB_TOKEN=$$JEKYLL_GITHUB_TOKEN make ci-test

- name: 'gcr.io/t9-docker-images/$REPO_NAME:builder-haxe'
  id: 'npm'
  dir: 'libs'
  secretEnv: ['NPM_TOKEN']
  env:
  - 'DOCKER_TAG=$COMMIT_SHA'
  - 'PROJECT_NAME=$REPO_NAME'
  - 'BRANCH_NAME=$BRANCH_NAME'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    # Only package and deploy if this is the master branch AND the package version is something new
    if [[ "$$BRANCH_NAME" != "master" ]]; then echo "branch != master, not deploying"; exit 0; fi;
    export CURRENT_NPM_VERSION=$$(cat package.json | jq -r .version)
    echo "CURRENT_NPM_VERSION=$${CURRENT_NPM_VERSION}"

    if npm view metapage versions  --json | jq --arg v $$CURRENT_NPM_VERSION -e '. as $f | $v | IN($f[])' ; then
      echo "version $${CURRENT_NPM_VERSION} exists"
    else
      echo "npm version is new, publishing..."
      make npm-publish
    fi

secrets:
- kmsKeyName: projects/t9-docker-images/locations/global/keyRings/t9_cloud_build/cryptoKeys/cloud_build_key_github_token
  secretEnv:
    NPM_TOKEN: |
      CiQAiVVX3MKdtsTGaR5Xh4GB0KAvfJgqtyBDAg+C9Ig6hv058YISTQDvWY1r1KQnvwBRbdDdwOiSmZWUbzMMPsTyhc/bhzfcT3VsUSRil50Rw4VutbUC4JBzvv30+4gk7r0gusfOwQOAxijGVN+k3530nPbz
    JEKYLL_GITHUB_TOKEN: |
      CiQAiVVX3MvIdDiIMT7NxseDLtnJgOLGcxYSgck0DMXYuyuz/MYSUQDvWY1rdceIF3qy0CIplRB1rBywgd22RYvuYTmXF0QWyxrZPIIKhphSXEmUQnMAvJeFuXpyDuT1kUM+G7o2qKJ5N5D01OneZm/4k0afExAlXA==

# Sometimes the default of 10m is not enough when the images must all be rebuilt
timeout: 900s
