# https://github.com/casey/just
# Build the npm libraries: metapage, metaframe

ROOT               := `dirname $(dirname $PWD)`
NPM_MODULE         := `cat package.json | jq -r .name`
NPM_MODULE_OUTPUT  := "./dist/" + NPM_MODULE
NPM_TOKEN          := env_var_or_default("NPM_TOKEN", "")
SERVER_PORT        := env_var_or_default("SERVER_PORT", "3000")
export CI          := env_var_or_default("CI", "")
parcel             := "./node_modules/parcel-bundler/bin/cli.js"
tsc                := "./node_modules/typescript/bin/tsc"
# DENO_SOURCE        := ROOT + "/.cloudseed/deno"
# minimal formatting, bold is very useful
bold               := '\033[1m'
normal             := '\033[0m'

_help:
    @just --list --unsorted --list-heading $'Commands:\n'

# Build the production npm distributions in dist/metaframe and dist/metapage
build: clean _build
_build:
    #!/usr/bin/env bash
    set -euo pipefail
    # Compiles the entire codebase to typescript files in ./dist. Packaged into the npm module '{{NPM_MODULE}}'
    # How to test installation of the build?
    echo -e "🍳👉 {{bold}}Compiling typescript  => {{NPM_MODULE_OUTPUT}}/{{normal}}"
    {{tsc}} --outDir {{NPM_MODULE_OUTPUT}}
    cp package.json      {{NPM_MODULE_OUTPUT}}/package.json
    cp README-PACKAGE.md {{NPM_MODULE_OUTPUT}}/README.md
    cp LICENSE           {{NPM_MODULE_OUTPUT}}/

    echo -e "🍳👉 {{bold}}Building standalone browser downloads{{normal}}"
    just _build_browser_modules {{NPM_MODULE_OUTPUT}}/browser/

    # copy production builds to the (dev+docs+test) dir
    for MODULES_TARGET in "test/page/js" "../docs/js"; do
        mkdir -p $MODULES_TARGET
        for meta in "metapage" "metaframe"; do
            rm -rf $MODULES_TARGET/$meta
            cp -r {{NPM_MODULE_OUTPUT}}/browser/$meta $MODULES_TARGET/
        done
    done

    echo "✅ {{NPM_MODULE_OUTPUT}}"
    echo "✅ {{NPM_MODULE_OUTPUT}}/browser/metapage"
    echo "✅ {{NPM_MODULE_OUTPUT}}/browser/metaframe"
    echo "✅ test/page/js/"
    echo "✅ ../docs/js/"

# Run tests
test:
    #!/usr/bin/env bash
    set -euo pipefail
    if [ ! -f /.dockerenv ]; then
        echo -e "Not in a docker container, assuming running on the host"
        cd ..
        docker-compose build libs && docker-compose run libs just test
    else
        just test/test
    fi

# Develop:
#   1. just dev
#   2. modify metapage/metaframe code
#   3. refresh browser window
# recompile metapage/metaframe src on change, and open a browser at the test page for the local metapage test
dev:
    just test/dev

# watch for file changes, build on changes, and run tests
@watch: clean
    echo "✅ watching and building for test/page/js/ only"
    watchexec --watch src -- 'just _build_for_test_dev && just test/test'

# Write library versions to the place where jekyll can consume:
# docs/_data/versions.yml
_versions-write-versions-to-jekyll:
    #!/usr/bin/env node
    var lib = require(process.cwd() + '/test/lib.js');
    var fs = require('fs');
    var p = lib.getMetapageVersions({includeLocal:true});
    p.then((versions) => { var out = 'versions: ' + JSON.stringify(versions); console.log('./docs/_data/versions.yml:\n' + out + '\n'); fs.writeFileSync('/docs/_data/versions.yml', out + '\n')});


# List all published versions
@npm_list:
    npm view {{NPM_MODULE}} versions --json

# If the version does not exist, publish the packages (metaframe+metapage)
npm_publish: build _publish

# actual publish npm module without any required steps
_publish: _require_NPM_TOKEN
    #!/usr/bin/env bash
    set -euo pipefail
    if [ "$CI" != "true" ]; then
        # This check is here to prevent publishing if there are uncommitted changes, but this check does not work in CI environments
        # because it starts as a clean checkout and git is not installed and it is not a full checkout, just the tip
        if [[ $(git status --short) != '' ]]; then
            git status
            echo -e '💥 Cannot publish with uncommitted changes'
            exit 2
        fi
    fi
    VERSION=`cat package.json | jq -r '.version'`
    INDEX=`npm view {{NPM_MODULE}} versions --json | jq "index( \"11$VERSION\" )"`
    if [ "$INDEX" != "null" ]; then
        echo -e '🌳 Version exists, not publishing'
        exit 0
    fi
    echo "PUBLISHING npm version $VERSION"
    cd {{NPM_MODULE_OUTPUT}} && \
        echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc && \
        npm publish --access public .

# Unpublish version https://docs.npmjs.com/cli/v7/commands/npm-unpublish
npm_unpublish version:
    @echo "❗ If this fails: you cannot use .npmrc or NPM_TOKEN, you must 'npm login' 🤷‍♀️"
    npm unpublish {{NPM_MODULE}}@{{version}}

# https://docs.npmjs.com/cli/v7/commands/npm-deprecate
module_deprecate version +message:
    npm deprecate {{NPM_MODULE}}@{{version}} "{{message}}"

# delete all generated assets/files
clean:
    @mkdir -p dist
    rm -rf dist/*
    rm -rf ../docs/js/*
    just test/clean

# build meta(page/frame) browser modules for testing
_build_browser_modules outdir development="":
    #!/usr/bin/env bash
    set -euo pipefail
    rm -rf {{outdir}}/metaframe
    rm -rf {{outdir}}/metapage
    # Should not need to do this because earlier steps compile check
    # {{tsc}} --noEmit
    # echo "✅ typescript check"
    {{tsc}} --noEmit
    if [ "{{development}}" = "development" ]; then
        echo "👉 development builds for test/page/js/"
        NODE_ENV=development {{parcel}} build --no-minify --target browser --global metaframe ./src/metapage/Metaframe.ts --out-dir {{outdir}}/metaframe --out-file index.js
        NODE_ENV=development {{parcel}} build --no-minify --target browser --global metapage  ./src/metapage/Metapage.ts  --out-dir {{outdir}}/metapage  --out-file index.js
    else
        echo "👉 production builds for test/page/js/"
        {{parcel}} build --target browser --global metaframe ./src/metapage/Metaframe.ts --out-dir {{outdir}}/metaframe --out-file index.js
        {{parcel}} build --target browser --global metapage  ./src/metapage/Metapage.ts  --out-dir {{outdir}}/metapage  --out-file index.js
    fi

@_require_NPM_TOKEN:
    if [ -z "$NPM_TOKEN" ]; then echo "Missing NPM_TOKEN"; exit 1; fi
